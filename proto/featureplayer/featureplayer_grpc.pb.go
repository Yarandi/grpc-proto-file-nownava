// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: featureplayer.proto

package featureplayer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeaturePlayerClient is the client API for FeaturePlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturePlayerClient interface {
	FeaturePlay(ctx context.Context, in *FeaturePlayerRequest, opts ...grpc.CallOption) (*FeaturePlayerResponse, error)
}

type featurePlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturePlayerClient(cc grpc.ClientConnInterface) FeaturePlayerClient {
	return &featurePlayerClient{cc}
}

func (c *featurePlayerClient) FeaturePlay(ctx context.Context, in *FeaturePlayerRequest, opts ...grpc.CallOption) (*FeaturePlayerResponse, error) {
	out := new(FeaturePlayerResponse)
	err := c.cc.Invoke(ctx, "/FeaturePlayer/FeaturePlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturePlayerServer is the server API for FeaturePlayer service.
// All implementations must embed UnimplementedFeaturePlayerServer
// for forward compatibility
type FeaturePlayerServer interface {
	FeaturePlay(context.Context, *FeaturePlayerRequest) (*FeaturePlayerResponse, error)
	mustEmbedUnimplementedFeaturePlayerServer()
}

// UnimplementedFeaturePlayerServer must be embedded to have forward compatible implementations.
type UnimplementedFeaturePlayerServer struct {
}

func (UnimplementedFeaturePlayerServer) FeaturePlay(context.Context, *FeaturePlayerRequest) (*FeaturePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeaturePlay not implemented")
}
func (UnimplementedFeaturePlayerServer) mustEmbedUnimplementedFeaturePlayerServer() {}

// UnsafeFeaturePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturePlayerServer will
// result in compilation errors.
type UnsafeFeaturePlayerServer interface {
	mustEmbedUnimplementedFeaturePlayerServer()
}

func RegisterFeaturePlayerServer(s grpc.ServiceRegistrar, srv FeaturePlayerServer) {
	s.RegisterService(&FeaturePlayer_ServiceDesc, srv)
}

func _FeaturePlayer_FeaturePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturePlayerServer).FeaturePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FeaturePlayer/FeaturePlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturePlayerServer).FeaturePlay(ctx, req.(*FeaturePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeaturePlayer_ServiceDesc is the grpc.ServiceDesc for FeaturePlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeaturePlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeaturePlayer",
	HandlerType: (*FeaturePlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeaturePlay",
			Handler:    _FeaturePlayer_FeaturePlay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "featureplayer.proto",
}

