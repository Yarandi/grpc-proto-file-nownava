// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: preauther.proto

package preauther

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PreautherClient is the client API for Preauther service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreautherClient interface {
	Preauth(ctx context.Context, in *PreauthRequest, opts ...grpc.CallOption) (*PreauthResponse, error)
}

type preautherClient struct {
	cc grpc.ClientConnInterface
}

func NewPreautherClient(cc grpc.ClientConnInterface) PreautherClient {
	return &preautherClient{cc}
}

func (c *preautherClient) Preauth(ctx context.Context, in *PreauthRequest, opts ...grpc.CallOption) (*PreauthResponse, error) {
	out := new(PreauthResponse)
	err := c.cc.Invoke(ctx, "/Preauther/Preauth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreautherServer is the server API for Preauther service.
// All implementations must embed UnimplementedPreautherServer
// for forward compatibility
type PreautherServer interface {
	Preauth(context.Context, *PreauthRequest) (*PreauthResponse, error)
	mustEmbedUnimplementedPreautherServer()
}

// UnimplementedPreautherServer must be embedded to have forward compatible implementations.
type UnimplementedPreautherServer struct {
}

func (UnimplementedPreautherServer) Preauth(context.Context, *PreauthRequest) (*PreauthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preauth not implemented")
}
func (UnimplementedPreautherServer) mustEmbedUnimplementedPreautherServer() {}

// UnsafePreautherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreautherServer will
// result in compilation errors.
type UnsafePreautherServer interface {
	mustEmbedUnimplementedPreautherServer()
}

func RegisterPreautherServer(s grpc.ServiceRegistrar, srv PreautherServer) {
	s.RegisterService(&Preauther_ServiceDesc, srv)
}

func _Preauther_Preauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreauthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreautherServer).Preauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Preauther/Preauth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreautherServer).Preauth(ctx, req.(*PreauthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Preauther_ServiceDesc is the grpc.ServiceDesc for Preauther service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Preauther_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Preauther",
	HandlerType: (*PreautherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preauth",
			Handler:    _Preauther_Preauth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "preauther.proto",
}
