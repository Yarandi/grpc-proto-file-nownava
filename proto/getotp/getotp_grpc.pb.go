// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: getotp.proto

package getotp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetotpClient is the client API for Getotp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetotpClient interface {
	GetOTP(ctx context.Context, in *GetOTPRequest, opts ...grpc.CallOption) (*GetOTPResponse, error)
}

type getotpClient struct {
	cc grpc.ClientConnInterface
}

func NewGetotpClient(cc grpc.ClientConnInterface) GetotpClient {
	return &getotpClient{cc}
}

func (c *getotpClient) GetOTP(ctx context.Context, in *GetOTPRequest, opts ...grpc.CallOption) (*GetOTPResponse, error) {
	out := new(GetOTPResponse)
	err := c.cc.Invoke(ctx, "/getotp/GetOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetotpServer is the server API for Getotp service.
// All implementations must embed UnimplementedGetotpServer
// for forward compatibility
type GetotpServer interface {
	GetOTP(context.Context, *GetOTPRequest) (*GetOTPResponse, error)
	mustEmbedUnimplementedGetotpServer()
}

// UnimplementedGetotpServer must be embedded to have forward compatible implementations.
type UnimplementedGetotpServer struct {
}

func (UnimplementedGetotpServer) GetOTP(context.Context, *GetOTPRequest) (*GetOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTP not implemented")
}
func (UnimplementedGetotpServer) mustEmbedUnimplementedGetotpServer() {}

// UnsafeGetotpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetotpServer will
// result in compilation errors.
type UnsafeGetotpServer interface {
	mustEmbedUnimplementedGetotpServer()
}

func RegisterGetotpServer(s grpc.ServiceRegistrar, srv GetotpServer) {
	s.RegisterService(&Getotp_ServiceDesc, srv)
}

func _Getotp_GetOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetotpServer).GetOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getotp/GetOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetotpServer).GetOTP(ctx, req.(*GetOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Getotp_ServiceDesc is the grpc.ServiceDesc for Getotp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Getotp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getotp",
	HandlerType: (*GetotpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOTP",
			Handler:    _Getotp_GetOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getotp.proto",
}
