// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: voteupdater.proto

package voteupdater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteupdaterClient is the client API for Voteupdater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteupdaterClient interface {
	Voteupdater(ctx context.Context, in *VoteupdaterRequest, opts ...grpc.CallOption) (*VoteupdaterResponse, error)
}

type voteupdaterClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteupdaterClient(cc grpc.ClientConnInterface) VoteupdaterClient {
	return &voteupdaterClient{cc}
}

func (c *voteupdaterClient) Voteupdater(ctx context.Context, in *VoteupdaterRequest, opts ...grpc.CallOption) (*VoteupdaterResponse, error) {
	out := new(VoteupdaterResponse)
	err := c.cc.Invoke(ctx, "/Voteupdater/Voteupdater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteupdaterServer is the server API for Voteupdater service.
// All implementations must embed UnimplementedVoteupdaterServer
// for forward compatibility
type VoteupdaterServer interface {
	Voteupdater(context.Context, *VoteupdaterRequest) (*VoteupdaterResponse, error)
	mustEmbedUnimplementedVoteupdaterServer()
}

// UnimplementedVoteupdaterServer must be embedded to have forward compatible implementations.
type UnimplementedVoteupdaterServer struct {
}

func (UnimplementedVoteupdaterServer) Voteupdater(context.Context, *VoteupdaterRequest) (*VoteupdaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voteupdater not implemented")
}
func (UnimplementedVoteupdaterServer) mustEmbedUnimplementedVoteupdaterServer() {}

// UnsafeVoteupdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteupdaterServer will
// result in compilation errors.
type UnsafeVoteupdaterServer interface {
	mustEmbedUnimplementedVoteupdaterServer()
}

func RegisterVoteupdaterServer(s grpc.ServiceRegistrar, srv VoteupdaterServer) {
	s.RegisterService(&Voteupdater_ServiceDesc, srv)
}

func _Voteupdater_Voteupdater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteupdaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteupdaterServer).Voteupdater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Voteupdater/Voteupdater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteupdaterServer).Voteupdater(ctx, req.(*VoteupdaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Voteupdater_ServiceDesc is the grpc.ServiceDesc for Voteupdater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voteupdater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Voteupdater",
	HandlerType: (*VoteupdaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Voteupdater",
			Handler:    _Voteupdater_Voteupdater_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voteupdater.proto",
}
